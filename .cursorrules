Here's your updated `.cursorrules` file with clear guidelines:

````markdown
# StellarLotto - Halloween No-Loss Lottery Game

# EasyA x Stellar Harvard Hack-o-Ween Hackathon (Oct 25-26, 2025)

## PROJECT STATUS: ~20 HOURS REMAINING

Track 2 submission - Smart Contract Games
Current Prize Target: $6,666 (first place)

## CORE CONCEPT - DO NOT CHANGE

- No-loss lottery where NOBODY loses money
- Winners get ALL yield, losers get full refund
- Halloween themed with spooky UI
- 3 pool sizes: Small (10+ USDC), Medium (100+ USDC), Whale (500+ USDC)

## ‚úÖ COMPLETED FEATURES

### Smart Contracts

- lottery_pool contract with all core functions
- mock_usdc contract (NEEDS approve/transfer_from fix)
- Jackpot rollover if <3 players
- Event emissions for frontend

### Core Mechanics Working

- enter_lottery(player, amount)
- pick_winner() with randomness
- claim_refund() for losers
- get_current_round() for UI

## üîß CRITICAL FIXES NEEDED (2 HOURS MAX)

```rust
// 1. Fix MockUSDC - Add these functions
pub fn approve(env: Env, from: Address, spender: Address, amount: i128)
pub fn transfer_from(env: Env, spender: Address, from: Address, to: Address, amount: i128)

// 2. Remove or fix trick_or_treat
// CURRENT: Drains contract funds
// FIX: Just remove it or make it cosmetic only
```
````

## üéØ FEATURE SET - LOCKED IN

### 1. Three Pool Sizes (Deploy same contract 3x)

- Small Pool: 10+ USDC minimum
- Medium Pool: 100+ USDC minimum
- Whale Pool: 500+ USDC minimum

### 2. Ghost Name Generator (Frontend Only)

```typescript
function getGhostName(address: string): string {
  const prefixes = ["Spooky", "Haunted", "Phantom", "Cursed"];
  const names = ["Vampire", "Banshee", "Wraith", "Poltergeist"];
  const seed = parseInt(address.slice(-8), 16);
  return `${prefixes[seed % 4]} ${names[(seed >> 4) % 4]}`;
}
```

### 3. Achievement Badges (Simple Tracking)

```rust
// Track in contract or frontend:
- üéÉ Fresh Soul (first entry)
- üëª Lucky Ghost (won once)
- ü¶á Night Creature (Halloween player)
- üêã Big Spender (500+ USDC entry)
```

## üìã ACTION PLAN - NEXT 20 HOURS

### Phase 1: Contract Fixes (Hours 0-2)

```bash
[ ] Fix MockUSDC approve/transfer_from
[ ] Remove/disable trick_or_treat
[ ] Deploy 3 pool contracts to testnet
[ ] Test full flow with Freighter
```

### Phase 2: Frontend Core (Hours 2-8)

```bash
[ ] Setup Next.js with Stellar SDK
[ ] Connect Freighter wallet
[ ] Build PoolSelector.tsx (3 cauldrons)
[ ] Build EnterLottery.tsx form
[ ] Display current round data
[ ] Implement ghost name generator
```

### Phase 3: UI Polish (Hours 8-14)

```bash
[ ] Halloween color scheme (orange/purple/black)
[ ] Bubbling cauldron animation
[ ] Countdown timer with pulse
[ ] Player list with ghost names
[ ] Achievement badge display
[ ] Sound effects (optional)
```

### Phase 4: Demo Prep (Hours 14-18)

```bash
[ ] Pre-populate pools with players
[ ] Fund demo wallets
[ ] Practice 2-minute demo flow
[ ] Record backup video
[ ] Prepare slides (Canva)
```

### Phase 5: Buffer (Hours 18-20)

```bash
[ ] Fix any critical bugs
[ ] Final demo practice
[ ] Deploy fresh for demo
```

## üéÆ DEMO FLOW (2 MINUTES)

```
0:00 - "A lottery where NOBODY loses money"
0:15 - Show 3 pools with different sizes
0:30 - Connect wallet, enter Medium pool
0:45 - Show as "Phantom Vampire" with Fresh Soul badge
1:00 - Trigger winner selection
1:15 - Show winner gets yield, losers get refunds
1:30 - "Built on Stellar: instant, cheap, fair"
1:45 - "Gamified DeFi for mainstream adoption"
2:00 - Questions
```

## üíª FRONTEND STRUCTURE

```typescript
app/
‚îú‚îÄ‚îÄ page.tsx                    // Main lottery page
‚îú‚îÄ‚îÄ layout.tsx                  // Halloween theme wrapper
components/
‚îú‚îÄ‚îÄ PoolSelector.tsx           // 3 cauldron selection
‚îú‚îÄ‚îÄ EnterLotteryForm.tsx       // USDC amount input
‚îú‚îÄ‚îÄ PlayersList.tsx            // Ghost names + amounts
‚îú‚îÄ‚îÄ CountdownTimer.tsx         // Time until round end
‚îú‚îÄ‚îÄ WinnerDisplay.tsx          // Winner announcement
‚îú‚îÄ‚îÄ AchievementBadges.tsx      // Player badges
‚îî‚îÄ‚îÄ GhostNameGenerator.tsx     // Address to ghost name
```

## üö´ DO NOT ADD

- Prediction markets
- Complex oracle systems
- NFT rewards
- Multiple round types
- Voting mechanisms
- Token launches
- AMM/DEX features

## üéØ WINNING CRITERIA ALIGNMENT

Track 2 Requirements:
‚úÖ Smart contracts deployed - 3 pool contracts
‚úÖ Working demo - Live entry and winner selection
‚úÖ On-chain game - Lottery with rounds
‚úÖ Multiplayer - Multiple players compete
‚úÖ Halloween themed - Ghost names, spooky UI

## üî• KEY TALKING POINTS

1. "First no-loss lottery on any blockchain"
2. "Three pools democratize access"
3. "Gamification makes DeFi fun"
4. "Built on Stellar for 5-second finality"
5. "Sustainable yield, not ponzi"

## üõ† TECHNICAL CONSTANTS

```typescript
// Stellar
const STROOPS = 10_000_000; // 1 USDC = 10^7 stroops
const TESTNET_HORIZON = "https://horizon-testnet.stellar.org";
const TESTNET_SOROBAN = "https://soroban-testnet.stellar.org";

// Pools
const SMALL_MIN = 10 * STROOPS;
const MEDIUM_MIN = 100 * STROOPS;
const WHALE_MIN = 500 * STROOPS;

// Demo
const ROUND_DURATION = 120; // 2 minutes for demo
const MOCK_YIELD_RATE = 1000; // 10% APY
```

## ‚ö° QUICK DECISIONS

- Bug found? Skip feature, fix bug
- Animation complex? Use simple CSS
- Sound not working? Skip it
- Contract issue? Use mock data for demo
- Time pressure? Core game > fancy features

## üìù COMMIT MESSAGE STYLE

```bash
git commit -m "üéÉ Add pool selector component"
git commit -m "üëª Implement ghost name generator"
git commit -m "ü¶á Deploy three pool contracts"
git commit -m "‚ö∞Ô∏è Fix USDC approval bug"
```

## üö® REMEMBER

1. NO NEW FEATURES after contract deployment
2. Halloween theme is BONUS - game must work
3. Test demo flow 10 times minimum
4. Have backup video ready
5. Judges want to see it WORK, not hear promises

## CURRENT PRIORITY: Deploy contracts to testnet NOW

Stop planning. Start shipping. You have 20 hours.

````

## Your Next 4 Hours - Step by Step

### Hour 1: Fix Contracts
```bash
# 1. Add to mock_usdc/src/lib.rs:
- approve() function
- transfer_from() function
- allowance tracking

# 2. In lottery_pool/src/lib.rs:
- Comment out trick_or_treat function
````

### Hour 2: Deploy Everything

```bash
# Deploy MockUSDC
stellar contract deploy --wasm mock_usdc.wasm

# Deploy 3 lottery pools
stellar contract deploy --wasm lottery_pool.wasm # Small
stellar contract deploy --wasm lottery_pool.wasm # Medium
stellar contract deploy --wasm lottery_pool.wasm # Whale

# Initialize each with different minimums
```

### Hour 3-4: Basic Frontend

```bash
# Just get SOMETHING showing
npx create-next-app@latest stellar-lotto-ui
npm install @stellar/stellar-sdk
npm install @stellar/freighter-api

# Create one component that:
- Connects wallet
- Shows pool data
- Allows entry
```
