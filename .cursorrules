# StellarLotto - Halloween Lottery Game

## Project Context

You are building StellarLotto, a no-loss lottery game for the EasyA x Stellar Harvard Hack-o-Ween hackathon (Oct 25-26, 2025). This is a Track 2 (Smart Contract Games) submission with a Halloween theme.

## Game Concept

A lottery where players CANNOT lose money. Everyone deposits USDC, the pool earns yield, one winner takes ALL yield, everyone else gets their deposit back. Think "PoolTogether" but with Halloween vibes.

## Technical Stack

- Blockchain: Stellar (Testnet)
- Smart Contracts: Rust with Soroban SDK
- Frontend: Next.js 14, TypeScript, Tailwind CSS
- Animations: Framer Motion
- Wallet: Freighter
- UI Theme: Halloween (dark purples, oranges, spooky animations)

## Project Structure

```

stellar-lotto/
‚îú‚îÄ‚îÄ contracts/
‚îÇ ‚îú‚îÄ‚îÄ lottery_pool/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ src/
‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ lib.rs # Main lottery logic
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ Cargo.toml
‚îÇ ‚îî‚îÄ‚îÄ mock_usdc/ # Mock USDC for testing
‚îú‚îÄ‚îÄ frontend/
‚îÇ ‚îú‚îÄ‚îÄ app/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ layout.tsx # Dark Halloween theme
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ page.tsx # Main lottery page
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ api/
‚îÇ ‚îú‚îÄ‚îÄ components/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ LotteryPool.tsx # Main game component
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ SpookyCountdown.tsx # Halloween countdown
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ WinnerCauldron.tsx # Winner selection animation
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ GhostPlayers.tsx # Player list with ghost avatars
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ PumpkinWallet.tsx # Wallet connector
‚îÇ ‚îî‚îÄ‚îÄ public/
‚îÇ ‚îú‚îÄ‚îÄ sounds/ # Spooky sound effects
‚îÇ ‚îî‚îÄ‚îÄ images/ # Halloween graphics
‚îî‚îÄ‚îÄ scripts/
‚îú‚îÄ‚îÄ deploy.sh
‚îî‚îÄ‚îÄ demo-setup.sh # Pre-populate for demo

```

## Smart Contract Guidelines

### Core Functions

```rust
// Main lottery functions
pub fn enter_lottery(player: Address, amount: i128) -> Result<()>
pub fn pick_winner() -> Address  // Called when timer ends
pub fn get_current_round() -> RoundInfo
pub fn claim_refund() -> Result<()>  // For losers

// Halloween special features
pub fn trick_or_treat() -> Bonus  // Random small prizes
pub fn costume_bonus(player: Address) -> u32  // Extra tickets
```

### Key Constants

```rust
const MIN_DEPOSIT: i128 = 100_0000000;  // 100 USDC
const ROUND_DURATION: u64 = 604800;     // 1 week (10 mins for demo)
const YIELD_RATE: u32 = 1000;           // 10% APY (mocked)
const HALLOWEEN_MULTIPLIER: u32 = 2;     // Double prizes on Halloween
```

## Frontend Components

### Halloween Theme Colors

```css
--blood-red: #8B0000
--pumpkin-orange: #FF7518
--ghost-white: #F8F8FF
--witch-purple: #4B0082
--midnight-black: #0C0C0C
--slime-green: #39FF14
--fog-gray: #2F4F4F
```

### Required Animations

1. **Cauldron Bubble**: Prize pool bubbles as it grows
2. **Ghost Float**: Players float as ghosts
3. **Pumpkin Spin**: Winner selection spinning pumpkin
4. **Bat Swarm**: Confetti replaced with flying bats
5. **Skeleton Dance**: Loading animation

### Sound Effects

- Enter lottery: "witch_laugh.mp3"
- Winner selected: "thunder_crash.mp3"
- Countdown tick: "heartbeat.mp3"
- New round: "wolf_howl.mp3"

## Game Features Priority

### MUST HAVE (Core Game Loop)

‚úÖ Enter with USDC
‚úÖ Show prize pool with cauldron animation
‚úÖ Spooky countdown timer
‚úÖ Pick winner with pumpkin wheel
‚úÖ Auto-refund losers
‚úÖ Halloween theme throughout

### SHOULD HAVE (Halloween Features)

üéÉ Trick-or-treat mini-game (instant small prizes)
üéÉ Costume avatars (ghost, witch, vampire, zombie)
üéÉ Special Halloween round (2x prizes)
üéÉ Spooky sound effects
üéÉ Fog animation on background

### NICE TO HAVE

üëª Achievement badges (First Blood, Soul Survivor)
üëª Haunted leaderboard
üëª Prediction side-game
üëª Referral system ("Summon Friends")

## Code Templates

### React Component Template

```typescript
"use client";
import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { useContract } from "@/hooks/useContract";

export default function SpookyComponent() {
  const { contract } = useContract();
  const [isHaunted, setIsHaunted] = useState(false);

  return (
    <motion.div
      className="bg-midnight-black border-2 border-pumpkin-orange rounded-lg p-6"
      whileHover={{ scale: 1.05 }}
      animate={{
        boxShadow: isHaunted ? "0 0 50px #FF7518" : "0 0 10px #4B0082",
      }}
    >
      {/* Spooky content */}
    </motion.div>
  );
}
```

### Contract Interaction

```typescript
// Always use these patterns for contract calls
async function enterLottery(amount: number) {
  try {
    showSkeletonLoader();
    playSound("witch_laugh");

    const tx = await contract.enter_lottery({
      player: publicKey,
      amount: BigInt(amount * 10000000),
    });

    showBatConfetti();
    return tx;
  } catch (error) {
    showGhostError(error);
  }
}
```

## Testing Approach

### Demo Scenario Setup

```javascript
// Pre-populate for impressive demo
const DEMO_STATE = {
  currentRound: {
    prizePool: 666, // Spooky number
    players: 13, // Unlucky number
    timeLeft: 120, // 2 minutes for live demo
  },
  players: [
    { name: "Vampire", deposit: 500, costume: "üßõ" },
    { name: "Witch", deposit: 200, costume: "üßô‚Äç‚ôÄÔ∏è" },
    { name: "Ghost", deposit: 100, costume: "üëª" },
    { name: "Zombie", deposit: 300, costume: "üßü" },
  ],
};
```

## Common Issues & Solutions

### Issue: Randomness for winner selection

```rust
// Use block timestamp + transaction hash (sufficient for hackathon)
let seed = env.ledger().timestamp() ^ env.ledger().sequence();
let winner_index = (seed % players.len()) as u32;
```

### Issue: No real yield source

```rust
// Mock yield calculation for demo
let mock_yield = (total_deposits * YIELD_RATE * duration) / (365 * 24 * 60 * 60 * 10000);
```

### Issue: Halloween theme too complex

Focus on color scheme + sound effects. Skip complex animations if running out of time.

## Deployment Commands

```bash
# Deploy to testnet
stellar contract deploy \
  --wasm target/wasm32-unknown-unknown/release/lottery_pool.wasm \
  --network testnet \
  --source $SECRET_KEY

# Initialize with Halloween params
stellar contract invoke \
  --id $CONTRACT_ID \
  --network testnet \
  -- initialize \
  --usdc_token $USDC_ADDRESS \
  --yield_rate 1000 \
  --round_duration 600 \
  --min_deposit 100000000
```

## Demo Talking Points

1. "Nobody loses money - everyone gets refunded!"
2. "Halloween special: Double prizes this week!"
3. "Look at the spooky animations - gaming meets DeFi!"
4. "Built on Stellar for instant, cheap transactions"
5. "Watch the cauldron bubble as the prize grows!"

## Time Management

- Hour 0-8: Smart contracts (must work!)
- Hour 8-16: Frontend with Halloween theme
- Hour 16-20: Animations and polish
- Hour 20-22: Demo preparation
- Hour 22-24: Buffer for issues

## Critical Reminders

- ALWAYS test winner selection before demo
- Have backup video of working game
- Pre-fund demo wallets
- Halloween theme is BONUS - core game must work first
- Sound effects on MUTE by default (let user enable)
- Mobile responsive is NOT required for hackathon

## Git Commit Style

Use spooky commit messages for fun:

- "üéÉ Add pumpkin wheel animation"
- "üëª Summon wallet connection"
- "üßô‚Äç‚ôÄÔ∏è Cast lottery entry spell"
- "‚ö∞Ô∏è Bury bugs in winner selection"
- "ü¶á Release bat confetti swarm"

````

---

## üìã **2. Project Writeup (For Claude Context)**

```markdown
# StellarLotto - Halloween No-Loss Lottery Game
## EasyA x Stellar Harvard Hack-o-Ween Hackathon Project

### Quick Summary
I'm building **StellarLotto**, a Halloween-themed lottery game where players CANNOT lose money. It's like PoolTogether but with spooky vibes for the Hack-o-Ween hackathon (Oct 25-26, 2025, Track 2: Smart Contract Games).

### Core Concept
- Players deposit USDC to enter weekly lottery
- Pool earns yield (mocked at 10% APY for demo)
- One winner takes ALL the yield
- Everyone else gets their original deposit back
- Nobody loses money!
- Halloween theme with spooky animations

### Why This Wins
1. **Simple enough** to build in 24 hours
2. **Game mechanics** clear for Track 2 (lottery, winners, rewards)
3. **Live demo magic** - judges can enter and win
4. **Halloween perfect** - themed for Hack-o-Ween
5. **Revolutionary concept** - first no-loss lottery

### Technical Implementation
- **Smart Contracts**: Rust with Soroban SDK on Stellar testnet
- **Frontend**: Next.js 14, TypeScript, Tailwind CSS, Framer Motion
- **Wallet**: Freighter browser extension
- **Key Innovation**: No-loss mechanism with guaranteed refunds

### Core Features (MVP)
1. Enter lottery with USDC (min 100 USDC)
2. Prize pool display (animated cauldron)
3. Countdown timer (spooky themed)
4. Winner selection (spinning pumpkin wheel)
5. Automatic refunds for non-winners
6. Halloween animations and sound effects

### Smart Contract Functions
```rust
enter_lottery(player, amount) // Join current round
pick_winner() // Select random winner when round ends
get_current_round() // View active round info
claim_refund() // Losers get money back
````

### Game Loop

1. **ENTER**: Deposit 100+ USDC
2. **WAIT**: Pool earns yield for 1 week (10 mins for demo)
3. **WIN**: Random selection at round end
4. **RESULT**: Winner gets deposit + ALL yield, others get deposit back
5. **REPEAT**: New round starts automatically

### Halloween Theme Elements

- Color scheme: Orange, purple, black, green
- Animations: Floating ghosts, bubbling cauldron, flying bats
- Sound effects: Witch laughs, thunder, wolf howls
- Player avatars: Vampire, witch, ghost, zombie costumes
- Special: Halloween round with 2x prizes

### Demo Strategy

1. Pre-populate with 13 players (spooky number)
2. Show $666 prize pool (Halloween number)
3. Live entry during presentation
4. 2-minute countdown for excitement
5. Winner selection with pumpkin wheel
6. Show refunds happening live

### Technical Challenges & Solutions

- **Randomness**: Using block timestamp + tx hash (sufficient for demo)
- **Yield Source**: Mocking 10% APY returns
- **Time Constraint**: Focus on core loop, Halloween theme is bonus
- **Live Demo Risk**: Pre-recorded backup video ready

### File Structure

```
stellar-lotto/
‚îú‚îÄ‚îÄ contracts/          # Rust smart contracts
‚îú‚îÄ‚îÄ frontend/          # Next.js Halloween UI
‚îî‚îÄ‚îÄ scripts/           # Deployment and demo setup
```

### Current Status

- [ ] Smart contracts (lottery logic)
- [ ] Frontend (Halloween themed UI)
- [ ] Animations (spooky effects)
- [ ] Demo preparation

### Hackathon Details

- **Event**: EasyA x Stellar Harvard Hack-o-Ween
- **Track**: Track 2 - Smart Contract Games
- **Duration**: 36 hours (Oct 25-26, 2025)
- **Location**: Boston
- **Prize Pool**: $6,666 for first place

### Why Track 2 (Not Track 1)

- It's literally a GAME (lottery)
- Has game mechanics (rounds, winners, rewards)
- Competitive multiplayer elements
- Not just DeFi infrastructure

### Help Needed From Claude

When starting new chat, I need help with:

1. Smart contract implementation in Rust/Soroban
2. Frontend Halloween animations
3. Demo script refinement
4. Bug fixes and optimization
5. Presentation preparation

### Key Links

- Stellar Testnet: https://horizon-testnet.stellar.org
- Soroban Docs: https://soroban.stellar.org
- Freighter Wallet: https://www.freighter.app

### Remember

- Halloween theme is BONUS - core game must work first
- 24-hour time limit - no complex features
- Focus on working demo over perfect code
- Judges want to see live gameplay
- Pre-record backup demo video

```

```
